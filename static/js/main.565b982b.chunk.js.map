{"version":3,"sources":["components/Footer.js","components/Header.js","components/MainContent.js","components/TodoItem.js","components/ContactCard.js","jokesData.js","components/Joke.js","components/todosData.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Header","timeOfDay","date","Date","hours","getHours","styles","fontSize","flex","flexDirection","justifyContent","color","style","MainContent","backgroundColor","TodoItem","props","type","checked","item","completed","onChange","handleChange","id","fontStyle","textDecoration","text","ContactCard","src","contact","imgUrl","alt","name","display","phone","email","jokesData","punchLine","question","Joke","todosData","App","state","answer","todos","bind","this","setState","prevState","updatedTodos","map","todo","console","log","jokeComponents","joke","key","TodoItems","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.565b982b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <h3>This is my footer element, Mika Tiihonen &#169; 2019</h3>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Header() {\n  const firstName = \"Mika\";\n  const lastName = \"Tiihonen\";\n  const date = new Date();\n  const hours = date.getHours();\n  let timeOfDay;\n  const styles = {\n    fontSize: 40,\n    flex: 1,\n    flexDirection: \" row_space_between\",\n    justifyContent: \"center\"\n  };\n\n  if (hours < 12) {\n    timeOfDay = \"morning\";\n    styles.color = \"olive\";\n  } else if (hours >= 12 && hours < 17) {\n    timeOfDay = \"afternoon\";\n    styles.color = \"green\";\n  } else {\n    timeOfDay = \"night\";\n    styles.color = \"red\";\n  }\n\n  return (\n    <header style={styles} className=\"navbar\">\n      <h1 style={styles}>Good {timeOfDay}! </h1>\n      <h1> {`${firstName} ${lastName}`} </h1>\n      <h3 style={styles}>\n        It is currently about {date.getHours() % 12} o'clock!\n      </h3>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction MainContent() {\n  const styles = {\n    color: \"#FF8C00\",\n    backgroundColor: \"white\",\n    fontSize: \"40px\"\n  };\n\n  return (\n    <main>\n      <h1 style={styles}>Make your choice !</h1>\n\n      <p>\n        I'm datanome and 47 years old man from Helsinki Finland. Places i would\n        like to visit are:\n      </p>\n      <ul>\n        <li>Rome</li>\n        <li>Tokio</li>\n        <li>Gran Canaria</li>\n      </ul>\n      <hr />\n    </main>\n  );\n}\n\nexport default MainContent;\n","import React from \"react\";\n\nfunction TodoItem(props) {\n  const completedStyle = {\n    fontStyle: \"italic\",\n    color: \"#cdcdcd\",\n    textDecoration: \"line-through\"\n  };\n\n  return (\n    <div className=\"todo-item\">\n      <input\n        type=\"checkbox\"\n        checked={props.item.completed}\n        onChange={() => props.handleChange(props.item.id)}\n      />\n      <p style={props.item.completed ? completedStyle : null}>\n        {props.item.text}\n      </p>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","import React from \"react\";\n\nfunction ContactCard(props) {\n  return (\n    <div className=\"contact-card\">\n      <img src={props.contact.imgUrl} alt=\"cat\" />\n      <h3>{props.contact.name}</h3>\n      <p style={{ display: props.contact.phone ? \"block\" : \"none\" }}>\n        Phone: {props.contact.phone}\n      </p>\n      <p style={{ color: !props.contact.phone && \"orange\" }}>\n        Email: {props.contact.email}\n      </p>\n      <hr />\n    </div>\n  );\n}\n\nexport default ContactCard;\n","const jokesData = [\n  {\n    id: 1,\n    punchLine:\n      \"It’s hard to explain puns to kleptomaniacs because they always take things literally.\"\n  },\n  {\n    id: 2,\n    question: \"What's the best thing about Switzerland?\",\n    punchLine: \"I don't know, but the flag is a big plus!\"\n  },\n  {\n    id: 3,\n    question:\n      \"Did you hear about the mathematician who's afraid of negative numbers?\",\n    punchLine: \"He'll stop at nothing to avoid them!\"\n  },\n  {\n    id: 4,\n    question: \"Hear about the new restaurant called Karma?\",\n    punchLine: \"There’s no menu: You get what you deserve.\"\n  },\n  {\n    id: 5,\n    question: \"Did you hear about the actor who fell through the floorboards?\",\n    punchLine: \"He was just going through a stage.\"\n  },\n  {\n    id: 6,\n    question: \"Did you hear about the claustrophobic astronaut?\",\n    punchLine: \"He just needed a little space.\"\n  }\n];\n\nexport default jokesData;\n","import React from \"react\";\n\nfunction Joke(props) {\n  return (\n    <div>\n      <h3 style={{ display: !props.question && \"none\" }}>\n        Question: {props.question}\n      </h3>\n      <h3 style={{ color: !props.question && \"#888888\" }}>\n        Answer: {props.punchLine}\n      </h3>\n      <hr />\n    </div>\n  );\n}\n\nexport default Joke;\n","const todosData = [\n  {\n    id: 1,\n    text: \"Take out the trash\",\n    completed: true\n  },\n  {\n    id: 2,\n    text: \"Grocery shopping\",\n    completed: false\n  },\n  {\n    id: 3,\n    text: \"Clean gecko tank\",\n    completed: false\n  },\n  {\n    id: 4,\n    text: \"Mow lawn\",\n    completed: true\n  },\n  {\n    id: 5,\n    text: \"Catch up on Arrested Development\",\n    completed: false\n  }\n];\n\nexport default todosData;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport MainContent from \"./components/MainContent\";\nimport TodoItem from \"./components/TodoItem\";\nimport ContactCard from \"./components/ContactCard\";\nimport jokesData from \"./jokesData\";\nimport Joke from \"./components/Joke\";\nimport todosData from \"./components/todosData\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      answer: \"Answer: Yes it is!\",\n      todos: todosData\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      });\n      console.log(prevState.todos);\n      console.log(updatedTodos);\n      return {\n        todos: updatedTodos\n      };\n    });\n  }\n  render() {\n    // function App() {\n    const jokeComponents = jokesData.map(joke => (\n      <Joke key={joke.id} question={joke.question} punchLine={joke.punchLine} />\n    ));\n    const TodoItems = this.state.todos.map(item => (\n      <TodoItem key={item.id} item={item} handleChange={this.handleChange} />\n    ));\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <MainContent />\n        <div className=\"todo-list\">{TodoItems}</div>\n        <div>\n          <h1>Is state importat to know? {this.state.answer}</h1>\n        </div>\n        <div>{jokeComponents}</div>\n        <div className=\"contacts\">\n          <ContactCard\n            contact={{\n              name: \"Mr. Whiskerson\",\n              imgUrl: \"http://placekitten.com/300/200\",\n              phone: \"(212) 555-1234\",\n              email: \"mr.whiskaz@catnap.meow\"\n            }}\n          />\n\n          <ContactCard\n            contact={{\n              name: \"Fluffykins\",\n              imgUrl: \"http://placekitten.com/400/200\",\n              phone: \"(212) 555-2345\",\n              email: \"fluff@me.com\"\n            }}\n          />\n\n          <ContactCard\n            contact={{\n              name: \"Destroyer\",\n              imgUrl: \"http://placekitten.com/400/300\",\n              phone: \"(212) 555-3456\",\n              email: \"ofworlds@yahoo.com\"\n            }}\n          />\n\n          <ContactCard\n            contact={{\n              name: \"Felix\",\n              imgUrl: \"http://placekitten.com/300/100\",\n              phone: \"(212) 555-4567\",\n              email: \"thecat@hotmail.com\"\n            }}\n          />\n\n          <ContactCard\n            contact={{\n              name: \"Kisu\",\n              imgUrl: \"http://placekitten.com/300/300\",\n              email: \"VainSähköpostilla@yhteyttä.com\"\n            }}\n          />\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// JSX\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}